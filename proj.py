import random
import asyncio
import time
import os
from environs import Env
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, FSInputFile
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

env = Env()
env.read_env()

bot = Bot(token=env('BOT_TOKEN'))
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_cooldowns = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserState(StatesGroup):
    selected_asset = State()
    expiry_time = State()
    generating_signal = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–æ–≤
ASSETS = {
    "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã OTC": [
        "Bitcoin OTC", "Ethereum OTC", "Cardano OTC", "Avalanche OTC",
        "Litecoin OTC", "Solana OTC", "Toncoin OTC", "Polkadot OTC",
        "Polygon OTC", "Chainlink OTC", "TRON OTC", "BNB OTC",
        "Dogecoin OTC", "Bitcoin ETF OTC"
    ],
    "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã": [
        "Bitcoin", "Ethereum", "Dash", "BCH/EUR", "BCH/GBP",
        "BCH/JPY", "BTC/GBP", "BTC/JPY", "Chainlink"
    ],
    "–í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã OTC": [
        "AED/CNY OTC", "AUD/CAD OTC", "AUD/NZD OTC", "CHF/JPY OTC",
        "EUR/CHF OTC", "EUR/HUF OTC", "EUR/NZD OTC", "EUR/RUB OTC",
        "EUR/USD OTC", "GBP/AUD OTC", "GBP/USD OTC", "JOD/CNY OTC",
        "NGN/USD OTC", "TND/USD OTC", "UAH/USD OTC", "USD/BRL OTC",
        "USD/CNH OTC", "USD/INR OTC", "USD/RUB OTC", "USD/SGD OTC",
        "USD/THB OTC", "YER/USD OTC", "ZAR/USD OTC", "USD/ARS OTC",
        "USD/VND OTC", "USD/IDR OTC", "LBP/USD OTC", "USD/EGP OTC",
        "EUR/TRY OTC", "SAR/CNY OTC", "USD/DZD OTC", "CAD/JPY OTC",
        "USD/COP OTC", "USD/JPY OTC", "USD/PHP OTC", "USD/BDT OTC",
        "QAR/CNY OTC", "USD/CLP OTC", "USD/PKR OTC", "KES/USD OTC",
        "AUD/USD OTC", "EUR/JPY OTC", "USD/CAD OTC", "NZD/JPY OTC",
        "AUD/CHF OTC", "EUR/GBP OTC", "OMR/CNY OTC", "USD/CHF OTC",
        "USD/MXN OTC", "AUD/JPY OTC"
    ],
    "–í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã": [
        "EUR/USD", "GBP/USD", "USD/JPY", "AUD/USD",
        "USD/CAD", "USD/CHF", "NZD/USD", "EUR/GBP",
        "EUR/JPY", "GBP/JPY", "AUD/JPY", "EUR/CAD",
        "AUD/NZD", "GBP/AUD", "EUR/AUD", "EUR/NZD"
    ],
    "–ê–∫—Ü–∏–∏ OTC": [
        "Apple OTC", "Tesla OTC", "Amazon OTC", "Microsoft OTC",
        "Google OTC", "Facebook OTC", "Netflix OTC", "Nvidia OTC",
        "PayPal OTC", "Visa OTC", "JPMorgan OTC", "Bank of America OTC"
    ],
    "–ê–∫—Ü–∏–∏": [
        "Apple", "Tesla", "Amazon", "Microsoft",
        "Google", "Facebook", "Netflix", "Nvidia"
    ],
    "–°—ã—Ä—å–µ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã": [
        "Gold", "Silver", "Oil", "Natural Gas",
        "Copper", "Platinum", "Palladium", "Wheat"
    ]
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–∞
def get_category_keyboard():
    builder = ReplyKeyboardBuilder()
    for category in ASSETS.keys():
        builder.add(KeyboardButton(text=category))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
def get_expiry_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(
        KeyboardButton(text="1 –º–∏–Ω"), 
        KeyboardButton(text="2 –º–∏–Ω"),
        KeyboardButton(text="3 –º–∏–Ω"),
        KeyboardButton(text="5 –º–∏–Ω")
    )
    builder.adjust(3)
    return builder.as_markup(resize_keyboard=True)

@dp.message(Command("start", "reboot"))
async def start_or_reboot(message: types.Message, state: FSMContext):
    await state.clear()
    
    user_name = message.from_user.first_name or "–∏–Ω–≤–µ—Å—Ç–æ—Ä"
    
    reboot_msg = await message.answer(
        "üîÉ <i>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è...</i>",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )
    
    await asyncio.sleep(1.5)
    try:
        await reboot_msg.delete()
    except:
        pass
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="‚ö° –ó–ê–ü–£–°–ö", 
                callback_data="start_generation"
            )],
            [
                InlineKeyboardButton(
                    text="üÜò –ü–û–î–î–ï–†–ñ–ö–ê",
                    url="https://t.me/dmitriy_suport"
                ),
                InlineKeyboardButton(
                    text="üìö –†–£–ö–û–í–û–î–°–¢–í–û",
                    callback_data="user_guide"
                ),
                
            ],
            [InlineKeyboardButton(
                text="üåê –û–§–ò–¶–ò–ê–õ–¨–ù–´–ô –ë–†–û–ö–ï–†",
                url="https://u3.shortink.io/smart/z708hoWjVDKFSQ"
            )]
        ]
    )
    
    welcome_text = f"""
<b>‚ú® {user_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ </b><b><i>QuantumTrade AI</i></b><b> ‚Äî –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞!</b>

‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨

üìä <b>–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –Ω–∞—à –±–æ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º?</b>

‚ñ™ <i>–ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑</i> ‚Äî <b>–Ω–µ–π—Ä–æ—Å–µ—Ç—å + –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–π–¥–∏–Ω–≥</b>  
‚ñ™ <i>–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è</i> –∫ —Ä—ã–Ω–æ—á–Ω—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º  
‚ñ™ <i>–ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞</i> –∫–∞–∂–¥–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞  

‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨

üíé <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è –≤–∞—Å:</b>

‚úì <b>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</b> ‚Äî –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏  
‚úì <b>–¢–æ—á–Ω–æ—Å—Ç—å</b> ‚Äî –¥–æ 87% –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (–Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö)  
‚úì <b>–ë–µ–∑ —ç–º–æ—Ü–∏–π</b> ‚Äî –∞–ª–≥–æ—Ä–∏—Ç–º –∏—Å–∫–ª—é—á–∞–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä  

‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨

üöÄ <b>–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?</b>  

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å <b><i>–ø–µ—Ä–≤—ã–π —Å–∏–≥–Ω–∞–ª —É–∂–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ —Å–µ–∫—É–Ω–¥!</i></b>  
"""
    
    try:
        photo = FSInputFile("welcome.jpg")
        try:
            await bot.delete_message(message.chat.id, message.message_id - 1)
        except:
            pass
            
        await message.answer_photo(
            photo=photo,
            caption=welcome_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer(
            text=welcome_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
@dp.message(F.text == "–ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–∞")
async def begin_signal_generation(message: types.Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫—Ç–∏–≤–∞:",
        reply_markup=get_category_keyboard()
    )

@dp.callback_query(F.data == "start_generation")
async def handle_start_generation(callback: types.CallbackQuery):
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫—Ç–∏–≤–∞:",
        reply_markup=get_category_keyboard()  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await callback.answer()  # –£–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏ —É –∫–Ω–æ–ø–∫–∏

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(F.text.in_(ASSETS.keys()))
async def handle_category(message: types.Message, state: FSMContext):
    builder = ReplyKeyboardBuilder()
    for asset in ASSETS[message.text]:
        builder.add(KeyboardButton(text=asset))
    builder.adjust(2)
    
    await message.answer(
        f"üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{message.text}</b>\n"
        "–í—ã–±–µ—Ä–∏ –∞–∫—Ç–∏–≤:",
        parse_mode="HTML",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–∞
@dp.message(F.text.in_([item for sublist in ASSETS.values() for item in sublist]))
async def handle_asset(message: types.Message, state: FSMContext):
    await state.update_data(selected_asset=message.text)
    await message.answer(
        f"‚úÖ –í—ã–±—Ä–∞–Ω –∞–∫—Ç–∏–≤: <b>{message.text}</b>\n"
        "‚è±Ô∏è –í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏:",
        parse_mode="HTML",
        reply_markup=get_expiry_keyboard()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ "–∞–Ω–∞–ª–∏–∑–∞"
async def show_analysis_process(message: types.Message, selected_asset: str, expiry: str):
    steps = [
        ("üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞...", 1),
        ("üì° –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ {}...".format(selected_asset), 1),
        ("üìä –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤—ã—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π...", 1),
        ("üß† –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π...", 2),
        ("‚öñÔ∏è –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤...", 1),
        ("üéØ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞...", 2)
    ]
    
    msg = await message.answer("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞–Ω–∞–ª–∏–∑—É...")
    
    for step, delay in steps:
        await asyncio.sleep(delay)
        await msg.edit_text(step)
    
    await asyncio.sleep(1)
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
    progress_msg = await message.answer("‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞: 0%")
    for i in range(1, 101):
        await asyncio.sleep(0.03)
        if i % 10 == 0 or i == 100:
            bar = "[" + "üü©" * (i // 10) + "‚¨úÔ∏è" * (10 - i // 10) + "]"
            await progress_msg.edit_text(f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞: {i}%\n{bar}")
    
    await asyncio.sleep(0.5)
    await progress_msg.delete()
    await msg.delete()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞
@dp.message(F.text.in_(["1 –º–∏–Ω", "2 –º–∏–Ω", "3 –º–∏–Ω", "5 –º–∏–Ω"]))
async def generate_signal(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    if user_id in user_cooldowns:
        elapsed = current_time - user_cooldowns[user_id]
        if elapsed < 60:  # 60 —Å–µ–∫—É–Ω–¥ = 1 –º–∏–Ω—É—Ç–∞
            remaining = int(60 - elapsed)
            await message.answer(
                f"‚è≥ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª —á–µ—Ä–µ–∑ {remaining} —Å–µ–∫—É–Ω–¥(—ã)",
                reply_markup=get_category_keyboard()
            )
            return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    user_cooldowns[user_id] = current_time
    
    data = await state.get_data()
    selected_asset = data.get('selected_asset', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–∫—Ç–∏–≤')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å "–∞–Ω–∞–ª–∏–∑–∞"
    await show_analysis_process(message, selected_asset, message.text)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–≥–Ω–∞–ª
    signal = random.choice(["BUY", "SELL"])
    expiry = message.text
    
    if signal == "BUY":
        signal_text = "üü¢  üü¢  üü¢  üü¢  üü¢  üü¢  \n\n         üöÄ    <b>BUY</b>    üöÄ\n\nüü¢  üü¢  üü¢  üü¢  üü¢  üü¢  "
        profit = f"üìà –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: +{random.randint(5, 15)}%"
    else:
        signal_text = "üî¥  üî¥  üî¥  üî¥  üî¥  üî¥  \n\n         üõë    <b>SELL</b>    üõë\n\nüî¥  üî¥  üî¥  üî¥  üî¥  üî¥  "
        profit = f"üìâ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: +{random.randint(5, 15)}%"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
    await message.answer(
        f"‚ïê‚ïê <b>–¢–û–†–ì–û–í–´–ô –°–ò–ì–ù–ê–õ</b> ‚ïê‚ïê\n\n"
        f"{signal_text}\n\n"
        f"üìå <b>–ê–∫—Ç–∏–≤:</b> {selected_asset}\n"
        f"‚è≥ <b>–≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è:</b> {expiry}\n"
        f"üéØ <b>–°—Ç–æ–ø-–ª–æ—Å—Å:</b> -{random.randint(2, 5)}%\n"
        f"{profit}\n\n"
        f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        f"‚ÑπÔ∏è –°–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ò–ò",
        parse_mode="HTML",
        reply_markup=get_category_keyboard()
    )
    await state.clear()

@dp.callback_query(F.data == "user_guide")
async def show_user_guide(callback: types.CallbackQuery, state: FSMContext):
    guide_text = """
<b>üìñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é QuantumTrade AI</b>

‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨

üîπ <b>–í–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å:</b>
–≠—Ç–æ—Ç –±–æ—Ç ‚Äî <i>–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫</i> –¥–ª—è –≤–∞—à–µ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞, –∞ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—è 100% –ø—Ä–∏–±—ã–ª–∏. –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç.

‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨

<b>üìå –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:</b>
1. –í—ã–±–∏—Ä–∞–µ—Ç–µ –∞–∫—Ç–∏–≤ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
2. –£–∫–∞–∑—ã–≤–∞–µ—Ç–µ –≤—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏ (1-5 –º–∏–Ω—É—Ç)
3. –ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ–∫ –∏ –≤—ã–¥–∞–µ—Ç —Å–∏–≥–Ω–∞–ª
4. <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è</i> –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–∏–≥–Ω–∞–ª –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ

‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨

<b>‚ö° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –Ω–µ–±–æ–ª—å—à–∏—Ö —Å—É–º–º
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã
‚Ä¢ –ù–µ —Ä–∏—Å–∫—É–π—Ç–µ –±–æ–ª–µ–µ 1-2% –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
‚Ä¢ –ö–æ–º–±–∏–Ω–∏—Ä—É–π—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –±–æ—Ç–∞ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º

‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏:</b>
–ù–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö - –æ–∫–æ–ª–æ 65-87%. –†–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.
"""

    back_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º
    sent_message = await callback.message.answer(
        text=guide_text,
        parse_mode="HTML",
        reply_markup=back_button
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(guide_message_id=sent_message.message_id)
    
    await callback.answer()

@dp.callback_query(F.data == "back_to_start")
async def back_to_start(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º
    user_data = await state.get_data()
    guide_message_id = user_data.get('guide_message_id')
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try:
        if guide_message_id:
            await bot.delete_message(
                chat_id=callback.from_user.id,
                message_id=guide_message_id
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await state.clear()
    await start_or_reboot(callback.message, state)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def unknown_message(message: types.Message):
    await message.answer(
        "‚ö†Ô∏è –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–ª–∏ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.",
        reply_markup=get_category_keyboard()
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
